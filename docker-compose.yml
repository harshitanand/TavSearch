version: '3.8'

services:
  # MongoDB service
  mongodb:
    image: mongo:6.0
    container_name: market_intelligence_mongo
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
      MONGO_INITDB_DATABASE: market_intelligence
    volumes:
      - mongodb_data:/data/db
      - ./scripts/mongo.init.js:/docker-entrypoint-initdb.d/mongo.init.js:ro
    networks:
      - market-intelligence-network

  # Redis service
  redis:
    image: redis:7-alpine
    container_name: market_intelligence_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass redis_password
    volumes:
      - redis_data:/data
    networks:
      - market-intelligence-network

  # Node.js application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: market_intelligence_app
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - MONGODB_URI=mongodb://admin:password@mongodb:27017/market_intelligence?authSource=admin
      - REDIS_URL=redis://:redis_password@redis:6379
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - TAVILY_API_KEY=${TAVILY_API_KEY}
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      - mongodb
      - redis
    volumes:
      - ./logs:/app/logs
    networks:
      - market-intelligence-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: market_intelligence_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - app
    networks:
      - market-intelligence-network

volumes:
  mongodb_data:
  redis_data:

networks:
  market-intelligence-network:
    driver: bridge
